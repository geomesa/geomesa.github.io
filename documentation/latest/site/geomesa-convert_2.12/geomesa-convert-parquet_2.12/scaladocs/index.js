Index.PACKAGES = {"org.locationtech" : [], "org.locationtech.geomesa" : [], "org.locationtech.geomesa.convert.parquet" : [{"name" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport", "shortDescription" : "Read support for parsing an arbitrary parquet file into avro records.", "object" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html", "members_class" : [{"label" : "prepareForRead", "tail" : "(configuration: Configuration, keyValueMetaData: Map[String, String], fileSchema: MessageType, readContext: ReadContext): RecordMaterializer[GenericRecord]", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.prepareForRead", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#prepareForRead(configuration:org.apache.hadoop.conf.Configuration,keyValueMetaData:java.util.Map[String,String],fileSchema:org.apache.parquet.schema.MessageType,readContext:org.apache.parquet.hadoop.api.ReadSupport.ReadContext):org.apache.parquet.io.api.RecordMaterializer[org.apache.avro.generic.GenericRecord]", "kind" : "def"}, {"label" : "init", "tail" : "(context: InitContext): ReadContext", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.init", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#init(context:org.apache.parquet.hadoop.api.InitContext):org.apache.parquet.hadoop.api.ReadSupport.ReadContext", "kind" : "def"}, {"member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport#<init>", "error" : "unsupported entity"}, {"label" : "prepareForRead", "tail" : "(arg0: ParquetConfiguration, arg1: Map[String, String], arg2: MessageType, arg3: ReadContext): RecordMaterializer[GenericRecord]", "member" : "org.apache.parquet.hadoop.api.ReadSupport.prepareForRead", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#prepareForRead(x$1:org.apache.parquet.conf.ParquetConfiguration,x$2:java.util.Map[String,String],x$3:org.apache.parquet.schema.MessageType,x$4:org.apache.parquet.hadoop.api.ReadSupport.ReadContext):org.apache.parquet.io.api.RecordMaterializer[T]", "kind" : "def"}, {"label" : "init", "tail" : "(arg0: ParquetConfiguration, arg1: Map[String, String], arg2: MessageType): ReadContext", "member" : "org.apache.parquet.hadoop.api.ReadSupport.init", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#init(x$1:org.apache.parquet.conf.ParquetConfiguration,x$2:java.util.Map[String,String],x$3:org.apache.parquet.schema.MessageType):org.apache.parquet.hadoop.api.ReadSupport.ReadContext", "kind" : "def"}, {"label" : "init", "tail" : "(arg0: Configuration, arg1: Map[String, String], arg2: MessageType): ReadContext", "member" : "org.apache.parquet.hadoop.api.ReadSupport.init", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#init(x$1:org.apache.hadoop.conf.Configuration,x$2:java.util.Map[String,String],x$3:org.apache.parquet.schema.MessageType):org.apache.parquet.hadoop.api.ReadSupport.ReadContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "NullGroupConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.NullGroupConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#NullGroupConverterextendsGroupConverter", "kind" : "class"}, {"label" : "NullPrimitiveConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.NullPrimitiveConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#NullPrimitiveConverter", "kind" : "object"}, {"label" : "NullConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.NullConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#NullConverter", "kind" : "object"}, {"label" : "MicrosConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.MicrosConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#MicrosConverterextendsPrimitiveConverter", "kind" : "class"}, {"label" : "DaysConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.DaysConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#DaysConverterextendsPrimitiveConverter", "kind" : "class"}, {"label" : "GroupedRepeatedConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.GroupedRepeatedConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#GroupedRepeatedConverterextendsGroupConverterwithSimpleFeatureReadSupport.Settable", "kind" : "class"}, {"label" : "RepeatedConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.RepeatedConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#RepeatedConverterextendsGroupConverterwithSimpleFeatureReadSupport.Settable", "kind" : "class"}, {"label" : "GenericMapConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.GenericMapConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#GenericMapConverterextendsGroupConverter", "kind" : "class"}, {"label" : "GenericListConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.GenericListConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#GenericListConverterextendsGroupConverter", "kind" : "class"}, {"label" : "GenericGroupConverter", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.GenericGroupConverter", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#GenericGroupConverterextendsGroupConverterwithSimpleFeatureReadSupport.Settable", "kind" : "class"}, {"label" : "AvroRecordMaterializer", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.AvroRecordMaterializer", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#AvroRecordMaterializerextendsRecordMaterializer[org.apache.avro.generic.GenericRecord]", "kind" : "class"}, {"label" : "AvroRecord", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.AvroReadSupport.AvroRecord", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#AvroRecordextendsGenericRecord", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/locationtech\/geomesa\/convert\/parquet\/AvroReadSupport.html", "kind" : "class"}, {"name" : "org.locationtech.geomesa.convert.parquet.ParquetConverter", "shortDescription" : "", "object" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html", "members_class" : [{"label" : "values", "tail" : "(parsed: CloseableIterator[GenericRecord], ec: EvaluationContext): CloseableIterator[Array[Any]]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverter.values", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#values(parsed:org.locationtech.geomesa.utils.collection.CloseableIterator[org.apache.avro.generic.GenericRecord],ec:org.locationtech.geomesa.convert.EvaluationContext):org.locationtech.geomesa.utils.collection.CloseableIterator[Array[Any]]", "kind" : "def"}, {"label" : "parse", "tail" : "(is: InputStream, ec: EvaluationContext): CloseableIterator[GenericRecord]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverter.parse", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#parse(is:java.io.InputStream,ec:org.locationtech.geomesa.convert.EvaluationContext):org.locationtech.geomesa.utils.collection.CloseableIterator[org.apache.avro.generic.GenericRecord]", "kind" : "def"}, {"member" : "org.locationtech.geomesa.convert.parquet.ParquetConverter#<init>", "error" : "unsupported entity"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.close", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#close():Unit", "kind" : "def"}, {"label" : "convert", "tail" : "(values: CloseableIterator[GenericRecord], ec: EvaluationContext): CloseableIterator[SimpleFeature]", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.convert", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#convert(values:org.locationtech.geomesa.utils.collection.CloseableIterator[T],ec:org.locationtech.geomesa.convert.EvaluationContext):org.locationtech.geomesa.utils.collection.CloseableIterator[org.geotools.api.feature.simple.SimpleFeature]", "kind" : "def"}, {"label" : "process", "tail" : "(is: InputStream, ec: EvaluationContext): CloseableIterator[SimpleFeature]", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.process", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#process(is:java.io.InputStream,ec:org.locationtech.geomesa.convert.EvaluationContext):org.locationtech.geomesa.utils.collection.CloseableIterator[org.geotools.api.feature.simple.SimpleFeature]", "kind" : "def"}, {"label" : "createEvaluationContext", "tail" : "(globalParams: Map[String, Any], success: Counter, failure: Counter): EvaluationContext", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.createEvaluationContext", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#createEvaluationContext(globalParams:Map[String,Any],success:com.codahale.metrics.Counter,failure:com.codahale.metrics.Counter):org.locationtech.geomesa.convert.EvaluationContext", "kind" : "def"}, {"label" : "createEvaluationContext", "tail" : "(globalParams: Map[String, Any]): EvaluationContext", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.createEvaluationContext", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#createEvaluationContext(globalParams:Map[String,Any]):org.locationtech.geomesa.convert.EvaluationContext", "kind" : "def"}, {"label" : "targetSft", "tail" : "(): SimpleFeatureType", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.targetSft", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#targetSft:org.geotools.api.feature.simple.SimpleFeatureType", "kind" : "def"}, {"label" : "options", "tail" : ": BasicOptions", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.options", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#options:O", "kind" : "val"}, {"label" : "fields", "tail" : ": Seq[BasicField]", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.fields", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#fields:Seq[F]", "kind" : "val"}, {"label" : "config", "tail" : ": BasicConfig", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.config", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#config:C", "kind" : "val"}, {"label" : "sft", "tail" : ": SimpleFeatureType", "member" : "org.locationtech.geomesa.convert2.AbstractConverter.sft", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#sft:org.geotools.api.feature.simple.SimpleFeatureType", "kind" : "val"}, {"label" : "createEvaluationContext", "tail" : "(globalParams: Map[String, Any]): EvaluationContext", "member" : "org.locationtech.geomesa.convert2.SimpleFeatureConverter.createEvaluationContext", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#createEvaluationContext(globalParams:java.util.Map[String,Any]):org.locationtech.geomesa.convert.EvaluationContext", "kind" : "final def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "iterator", "tail" : "(path: Path, ec: EvaluationContext, conf: Configuration): CloseableIterator[GenericRecord]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverter.iterator", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#iterator(path:org.apache.hadoop.fs.Path,ec:org.locationtech.geomesa.convert.EvaluationContext,conf:org.apache.hadoop.conf.Configuration):org.locationtech.geomesa.utils.collection.CloseableIterator[org.apache.avro.generic.GenericRecord]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverter.html", "kind" : "class"}, {"name" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory", "shortDescription" : "", "object" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html", "members_class" : [{"label" : "infer", "tail" : "(is: InputStream, sft: Option[SimpleFeatureType], hints: Map[String, AnyRef]): Try[(SimpleFeatureType, Config)]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory.infer", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#infer(is:java.io.InputStream,sft:Option[org.geotools.api.feature.simple.SimpleFeatureType],hints:Map[String,AnyRef]):scala.util.Try[(org.geotools.api.feature.simple.SimpleFeatureType,com.typesafe.config.Config)]", "kind" : "def"}, {"label" : "infer", "tail" : "(is: InputStream, sft: Option[SimpleFeatureType], path: Option[String]): Option[(SimpleFeatureType, Config)]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory.infer", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#infer(is:java.io.InputStream,sft:Option[org.geotools.api.feature.simple.SimpleFeatureType],path:Option[String]):Option[(org.geotools.api.feature.simple.SimpleFeatureType,com.typesafe.config.Config)]", "kind" : "def"}, {"member" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory#<init>", "error" : "unsupported entity"}, {"label" : "withDefaults", "tail" : "(conf: Config): Config", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.withDefaults", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#withDefaults(conf:com.typesafe.config.Config):com.typesafe.config.Config", "kind" : "def"}, {"label" : "apply", "tail" : "(sft: SimpleFeatureType, conf: Config): Option[SimpleFeatureConverter]", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.apply", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#apply(sft:org.geotools.api.feature.simple.SimpleFeatureType,conf:com.typesafe.config.Config):Option[org.locationtech.geomesa.convert2.SimpleFeatureConverter]", "kind" : "def"}, {"label" : "optsConvert", "tail" : ": ConverterOptionsConvert[BasicOptions]", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.optsConvert", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#optsConvert:org.locationtech.geomesa.convert2.AbstractConverterFactory.ConverterOptionsConvert[O]", "kind" : "val"}, {"label" : "fieldConvert", "tail" : ": FieldConvert[BasicField]", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.fieldConvert", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#fieldConvert:org.locationtech.geomesa.convert2.AbstractConverterFactory.FieldConvert[F]", "kind" : "val"}, {"label" : "configConvert", "tail" : ": ConverterConfigConvert[BasicConfig]", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.configConvert", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#configConvert:org.locationtech.geomesa.convert2.AbstractConverterFactory.ConverterConfigConvert[C]", "kind" : "val"}, {"label" : "typeToProcess", "tail" : ": String", "member" : "org.locationtech.geomesa.convert2.AbstractConverterFactory.typeToProcess", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#typeToProcess:String", "kind" : "val"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.LazyLogging.logger", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#logger:com.typesafe.scalalogging.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "schemaTypes", "tail" : "(schema: MessageType): Seq[InferredType]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory.schemaTypes", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#schemaTypes(schema:org.apache.parquet.schema.MessageType):Seq[org.locationtech.geomesa.convert2.TypeInference.InferredType]", "kind" : "def"}, {"label" : "TypeToProcess", "tail" : ": String", "member" : "org.locationtech.geomesa.convert.parquet.ParquetConverterFactory.TypeToProcess", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#TypeToProcess:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetConverterFactory.html", "kind" : "class"}, {"name" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory", "shortDescription" : "", "members_class" : [{"label" : "ParquetMultiPolygonFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetMultiPolygonFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetMultiPolygonFnextendsParquetFunctionFactory.this.ParquetMultiPolygon", "kind" : "class"}, {"label" : "ParquetMultiPolygon", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetMultiPolygon", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetMultiPolygon=ParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.MultiPolygon,java.util.List[java.util.List[java.util.List[Double]]]]", "kind" : "type"}, {"label" : "ParquetPolygonFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetPolygonFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetPolygonFnextendsParquetFunctionFactory.this.ParquetPolygon", "kind" : "class"}, {"label" : "ParquetPolygon", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetPolygon", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetPolygon=ParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.Polygon,java.util.List[java.util.List[Double]]]", "kind" : "type"}, {"label" : "ParquetMultiLineStringFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetMultiLineStringFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetMultiLineStringFnextendsParquetFunctionFactory.this.ParquetMultiLineString", "kind" : "class"}, {"label" : "ParquetMultiLineString", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetMultiLineString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetMultiLineString=ParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.MultiLineString,java.util.List[java.util.List[Double]]]", "kind" : "type"}, {"label" : "ParquetLineStringFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetLineStringFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetLineStringFnextendsParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.LineString,java.util.List[Double]]", "kind" : "class"}, {"label" : "ParquetMultiPointFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetMultiPointFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetMultiPointFnextendsParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.MultiPoint,java.util.List[Double]]", "kind" : "class"}, {"label" : "ParquetPointFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetPointFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetPointFnextendsParquetFunctionFactory.this.ParquetGeometryFn[org.locationtech.jts.geom.Point,Double]", "kind" : "class"}, {"label" : "ParquetGeometryFn", "tail" : "", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.ParquetGeometryFn", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ParquetGeometryFn[T<:org.locationtech.jts.geom.Geometry,U]extendsTransformerFunction.NamedTransformerFunction", "kind" : "abstract class"}, {"label" : "functions", "tail" : "(): Seq[TransformerFunction]", "member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory.functions", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#functions:Seq[org.locationtech.geomesa.convert2.transforms.TransformerFunction]", "kind" : "def"}, {"member" : "org.locationtech.geomesa.convert.parquet.ParquetFunctionFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/locationtech\/geomesa\/convert\/parquet\/ParquetFunctionFactory.html", "kind" : "class"}], "org.locationtech.geomesa.convert" : [], "org" : []};